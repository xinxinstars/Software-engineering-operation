import java.util.*;
public class mg {
    /**迷宫矩阵*/
    static int[][] maze;
    /**矩阵大小*/
    static int n;
    /**步长*/
    static int step;
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        n = sc.nextInt();
        //几乘几的矩阵表示
        step = n * n;
        maze = new int[n][n];
        long time1=System.currentTimeMillis();
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                maze[i][j] = sc.nextInt();
                //起始点为（1，1），初始步长为0
                recursion(1, 1, 0);
            }
            if (step == n * n) {
                //遇到障碍物
                System.out.println("No solution");
            }
            else {
                System.out.println(step);
            }
            long time2=System.currentTimeMillis();
            System.out.println(time2-time1);


        }
    }
    public static void recursion(int x, int y, int count) {

        //跳出条件，走到[n-2][n-2]位置即为终点
        if(x==n-2 && y==n-2)
        {
            step = Math.min(count, step);
        } else {
            //走过的位置不能重复走，故而走过就设为1（障碍物）
            maze[x][y]=1;
            if(y<n-1 && maze[x][y+1]==0) {
                //当迷宫碰到1也就是障碍时，右扫描。
                recursion(x, y+1, count+1);
            }
            if(x<n-1 && maze[x+1][y]==0) {
                //下扫描
                recursion(x+1, y, count+1);
            }
            if(x>1 && maze[x-1][y]==0) {
                //上扫描
                recursion(x-1, y, count+1);
            }
            if(y>1 && maze[x][y-1]==0) {
                //左扫描
                recursion(x, y-1, count+1);
            }
            //回溯，恢复原来的状态，即从该处相邻地方出发没有找到完整路径，所以将之前走过的这条路径状态恢复
            maze[x][y]=0;

        }

    }
}
